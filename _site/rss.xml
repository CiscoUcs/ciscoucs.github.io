<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
        <title>Cisco UCS Developer Resources</title>
        <description>Cisco UCS Developer Resources - Cisco UCS</description>
        <link>http://ciscoucs.github.io</link>
        <atom:link href="http://ciscoucs.github.io/rss.xml" rel="self" type="application/rss+xml" />
        <lastBuildDate>Mon, 01 May 2017 09:56:33 -0700</lastBuildDate>
        <pubDate>Mon, 01 May 2017 09:56:33 -0700</pubDate>
        <ttl>60</ttl>


        <item>
                <title>PXE-less Automated UCS Installation of RedHat/CentOS</title>
                <description>
&lt;p&gt;&lt;strong&gt;Author:&lt;/strong&gt; &lt;a href=&quot;https://twitter.com/vallard&quot;&gt;@vallard&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This past week I learned about the vmedia policy that has been in UCS since the 2.2(2c).  What is great about this is it gives us a way to automate server installations without using IPXE.&lt;/p&gt;

&lt;p&gt;I’m a huge fan of PXE booting and I’ve been doing it for muchos años.  We used to use &lt;a href=&quot;http://etherboot.org/wiki/index.php&quot;&gt;gPXE&lt;/a&gt; and then moved on to &lt;a href=&quot;http://ipxe.org/&quot;&gt;IPXE&lt;/a&gt; with the rest of the industry.   In fact I still love it today.  I even wrote a lot of code in &lt;a href=&quot;https://xcat.org&quot;&gt;xCAT2&lt;/a&gt; that would automate this for 1200+ bare metal clusters.&lt;/p&gt;

&lt;p&gt;There are some things that suck about PXEbooting.  And I run into this all the time, especially in Enterprise environments.  PXEbooting requires DHCP, HTTP, TFTP, etc to all work in harmony.  And usually things just aren’t set up that way.  You could make separate one off networks, but that kind of sucks.&lt;/p&gt;

&lt;p&gt;vMedia policies give us a way to create an autmated installation of our servers without having to mess with the network.  In this post we will outline how to use vMedia policies to create an automated environment to provision bare metal Red Hat and CentOS 7 installations.  You will see that this is also part of what we use as we are building a way for Kubernetes to install stupid simple on UCS environments.&lt;/p&gt;

&lt;h2 id=&quot;1-prereqs&quot;&gt;1. Prereqs&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;You will need a build server that runs nginx or some type of web server.  This biuld server should be on the same network or some place where the nodes that are booting can get to.
    &lt;ul&gt;
      &lt;li&gt;The easiest way to do this:  Suppose each node has an IP address of 192.168.2.x/24.  Then you can have a webserver on 192.168.2.2 that can have all your files. If possible make this OS the same OS that you are installing on the nodes.&lt;/li&gt;
      &lt;li&gt;Alternatively you could just create an ISO image with all the packages you need and avoid using the network all together.  This may not scale as well but may be just fine for you.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You will need an IP address for all the servers (we are using 192.168.2.x/24.  The VLAN should already be set up for this to work in UCS and the appropriate networking.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Installation Media should be placed on the webserver in a place where it can be accessed.  You should download this on your build server first.  For CentOS you can grab it from places like &lt;a href=&quot;https://www.centos.org/download/&quot;&gt;here&lt;/a&gt; or &lt;a href=&quot;http://isoredirect.centos.org/centos/7/isos/x86_64/CentOS-7-x86_64-DVD-1611.iso&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;vMedia policies require M3 B-Series or C-Series at minimum.  I had some old M1 and M2 UCS blades sitting around and unfortunately vMedia policies aren’t supported on these blades.  Don’t fret:  You can still use them and PXE works fine, but you can’t use the vMedia policy to get around PXE.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;A build server.  We are using RedHat 7.3 but any RedHat derivative in the 7 range should work fine.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-create-images&quot;&gt;2. Create Images&lt;/h2&gt;

&lt;p&gt;We are going to create two images for bootstrapping the operating system:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;ISOLINUX Boot ISO Image.  This first image is the same for all nodes.  We want it as small as possible so we’re not using an entire giant image for this stage clogging up our network.  Unfortunately, its still ~414MB so not as great as we would like.  There may be some things we can do later to make it smaller, but this is what we are going with for now.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Kickstart Disk Image.  We are also creating a unique disk image for each node so that it can have its own kickstart file and thus bring uniqueness to all our nodes.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will also use the entire CentOS ISO image and place it in a directory on our webserver.  So there are three parts here that need to be in place for this to all work.  Please download an appropriate ISO file&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/boot-media.png&quot; alt=&quot;Boot Media&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;21-create-the-boot-iso-image&quot;&gt;2.1 Create the Boot ISO Image&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Credit:&lt;/strong&gt; Some of this information was gleaned from the &lt;a href=&quot;http://www.smorgasbork.com/2012/01/04/building-a-custom-centos-7-kickstart-disc-part-3/&quot;&gt;help of the wonderful Internet&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Boot ISO image involves extracting the essential parts out of the installation media.  We make a root directory on the build server to build from (kubm) and then put everything there.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir -p /tmp/kubm  # our working directory
mkdir -p /mnt
mount -o loop centos7.2.iso /mnt  # this is the CentOS iso file we downloaded.
cd /tmp/kubm
cp -a /mnt/isolinux .
cp /mnt/.discinfo isolinux/
cp /mnt/.treeinfo isolinux/
cp -a /mnt/LiveCD isolinux/
cp -a /mnt/images isolinux/
chmod 664 isolinux/isolinux.bin
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;211-edit-isolinuxcfg&quot;&gt;2.1.1 Edit &lt;code class=&quot;highlighter-rouge&quot;&gt;isolinux.cfg&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Now edit the &lt;code class=&quot;highlighter-rouge&quot;&gt;isolinux/isolinux.cfg&lt;/code&gt; file and change the first label entry to look something like the below:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;label linux
  menu label ^Install CentOS Linux 7
  menu default
  kernel vmlinuz
  append initrd=initrd.img inst.stage2=hd:LABEL=CentOS\x207\x20x86_64 inst.ks=hd:LABEL=KUBM:ks.cfg quiet
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Really you should only need to change the append line and add the &lt;code class=&quot;highlighter-rouge&quot;&gt;inst.ks&lt;/code&gt; line.  This will make it automatic.  You should also add the &lt;code class=&quot;highlighter-rouge&quot;&gt;menu default&lt;/code&gt; line and delete it from the stanza that is below it so this comes up first.&lt;/p&gt;

&lt;p&gt;You could also change the time out and all kinds of other things to make it go faster and install.&lt;/p&gt;

&lt;p&gt;You’ll notice that we are using the &lt;code class=&quot;highlighter-rouge&quot;&gt;inst.ks=hd:LABEL=KUBM:ks.cfg&lt;/code&gt;.  What this means is we are using the other remotely mounted image (that we’re about to create) to make unique images for each of our nodes.  This allows us to customize kickstart files individually for each node.  You could instead put one kickstart file on this one file and have a go at it, but then every node would get the same kickstart file.  This may be just fine but we want a bit more flexibility.&lt;/p&gt;

&lt;h4 id=&quot;212-build-the-iso-image&quot;&gt;2.1.2 Build the ISO Image&lt;/h4&gt;

&lt;p&gt;Once you have everything in place its time to package this badboy up.  The build commands for the RHEL or CentOS images differ slightly and two examples are written below.  Be sure the &lt;code class=&quot;highlighter-rouge&quot;&gt;-V&lt;/code&gt; flag matches what is in the isolinux.cfg file.  Note:  The isolinux.cfg file uses \x20 for spaces.  You can just use spaces below.&lt;/p&gt;

&lt;h5 id=&quot;2121-redhat-73&quot;&gt;2.1.2.1 RedHat 7.3&lt;/h5&gt;

&lt;p&gt;For RedHat your command may look as follows:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkisofs -o /tmp/redhat7.3-boot.iso -b isolinux.bin \
	-c boot.cat -no-emul-boot -V 'RHEL-7.3 Server.x86_64' \
	-boot-load-size 4 -boot-info-table -r -J -v -T isolinux/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;2122-centos-72&quot;&gt;2.1.2.2 CentOS 7.2&lt;/h5&gt;

&lt;p&gt;For CentOS it might look something like the below:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkisofs -o /tmp/centos7.2-boot.iso -b isolinux.bin \
	-c boot.cat -no-emul-boot -V 'CentOS 7 x86_64' \
	-boot-load-size 4 -boot-info-table -r -J -v -T isolinux/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Once you are done, you should have an iso image in the /tmp directory that can be used to boot.&lt;/p&gt;

&lt;h3 id=&quot;22-create-the-kickstart-images&quot;&gt;2.2 Create the Kickstart Images&lt;/h3&gt;

&lt;h4 id=&quot;221-kickstart-file&quot;&gt;2.2.1 Kickstart File&lt;/h4&gt;

&lt;p&gt;Creating Kickstart files is an iterative process and can be quite time consuming.  Download &lt;code class=&quot;highlighter-rouge&quot;&gt;pykickstart&lt;/code&gt; so that you can validate your file is correct.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum -y install pykickstart
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The kickstart file will be unique for each node as we configure basic networking in the file and then give each node the installation media to get via http.&lt;/p&gt;

&lt;h5 id=&quot;2211-basic-kickstart-file&quot;&gt;2.2.1.1 Basic Kickstart File&lt;/h5&gt;
&lt;p&gt;The below kickstart file will get you started.  Substitute the IP addresses for your own.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#version=DEVEL&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# System authorization information&lt;/span&gt;
auth --useshadow --enablemd5
&lt;span class=&quot;c&quot;&gt;# Install OS instead of upgrade&lt;/span&gt;
install
&lt;span class=&quot;c&quot;&gt;# Use network installation&lt;/span&gt;
url --url&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://192.168.2.2/install/centos7.2&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Use graphical install&lt;/span&gt;
graphical
&lt;span class=&quot;c&quot;&gt;# Firewall configuration&lt;/span&gt;
firewall --disabled
firstboot --disable
ignoredisk --only-use&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;sdb,sda
&lt;span class=&quot;c&quot;&gt;# Keyboard layouts&lt;/span&gt;
keyboard --vckeymap&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;us --xlayouts&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'us'&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# System language&lt;/span&gt;
lang en_US.UTF-8

&lt;span class=&quot;c&quot;&gt;# Network information&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#network  --bootproto=dhcp --device=enp6s0 --ipv6=auto --activate&lt;/span&gt;
network --activate --bootproto&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;static --ip&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;192.168.2.213 --netmask&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;255.255.255.0 --gateway&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;192.168.2.2 --nameserver&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;192.168.2.2
network  --bootproto&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;dhcp --device&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;enp7s0 --onboot&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;off --ipv6&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;auto
network  --hostname&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;kube01
&lt;span class=&quot;c&quot;&gt;# Reboot after installation if you want.  We leave this to not reboot so we can &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# reboot&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Root password&lt;/span&gt;
rootpw --iscrypted &lt;span class=&quot;nv&quot;&gt;$6$KVZvCsW9P&lt;/span&gt;.08qpM7&lt;span class=&quot;nv&quot;&gt;$Yx1KnYmjxhiFcr99ocdpZYDb4MpJb6VEeZO7wrb&lt;/span&gt;/XRlaKfJsLkrYpy1oJLJqxbqWJQPqTAb.y.WOWV/dXjDAf0
&lt;span class=&quot;c&quot;&gt;# SELinux configuration (make things super secure...)&lt;/span&gt;
selinux --disabled
&lt;span class=&quot;c&quot;&gt;# System services&lt;/span&gt;
services --enabled&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;chronyd&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# System timezone&lt;/span&gt;
timezone US/Pacific
&lt;span class=&quot;c&quot;&gt;# System bootloader configuration&lt;/span&gt;
bootloader --append&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; crashkernel=auto&quot;&lt;/span&gt; --location&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mbr --boot-drive&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;sda
autopart --type&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;lvm
&lt;span class=&quot;c&quot;&gt;# Partition clearing information&lt;/span&gt;
clearpart --all --initlabel

%packages
@^minimal
%end

%post
&lt;span class=&quot;c&quot;&gt;#---- Install our SSH key ----&lt;/span&gt;
mkdir -m0700 /root/.ssh/
cat &lt;span class=&quot;sh&quot;&gt;&amp;lt;&amp;lt;EOF &amp;gt;/root/.ssh/authorized_keys
ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA5xwR+1+0sBwa0wME6maFjXjIdxUS9taPOgpf1c1EJUgZENDUUOdOabDbEZ6w/xLvx7vHtYDMMTzbyKif9O5hfgQ4RXNjMIMhu+PgShfCsUCFyhMF+cKZNeg2fUZn83r9oWWcFfL31Qh8PMe3yHV30fmBUwpqdCiUCrLznefVwsIlBcnr0DaScU2TdfY73sFR69K6bBJ80GYryaQi2v2s7cjZl2sDMuv5tDNmiOZCxtDJpRS4oaILnRh0gPQaYem0Hl2AGsETsYzqbXsvKkKd96hUtKmoDQ/voHaqFvB6/don12BFQDkTtCGqOCkga7JIGWhAdZbD3+owvOPaPAvK7Q==
EOF
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;### set permissions&lt;/span&gt;
chmod 0600 /root/.ssh/authorized_keys
&lt;span class=&quot;c&quot;&gt;### fix up selinux context if you are using it.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#restorecon -R /root/.ssh/&lt;/span&gt;
%end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;A few notes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Password&lt;/strong&gt; use the following to encrypt a password:  &lt;code class=&quot;highlighter-rouge&quot;&gt;python -c 'import crypt,getpass;pw=getpass.getpass();print(crypt.crypt(pw) if (pw==getpass.getpass(&quot;Confirm: &quot;)) else exit())'&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Update the Timezone, keyboard, and partitioning information how you want.&lt;/li&gt;
  &lt;li&gt;For the &lt;code class=&quot;highlighter-rouge&quot;&gt;%post&lt;/code&gt; section we’ve included our public key so we could log into this from the build server without passwords.&lt;/li&gt;
  &lt;li&gt;You can go crazy with all the customizations in this.  This is where I spend the most time.  Testing on Virtual Box is a good way to make this faster.  Waiting for UCS servers to boot up are not a good use of your time.&lt;/li&gt;
  &lt;li&gt;Docs are available &lt;a href=&quot;https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Installation_Guide/sect-kickstart-syntax.html#sect-kickstart-commands&quot;&gt;here&lt;/a&gt; for all command options as well as package selections.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;222-creating-the-kickstart-image&quot;&gt;2.2.2 Creating the Kickstart Image&lt;/h4&gt;
&lt;p&gt;To mount this kickstart file as a CIMC HD image we need to embed our &lt;code class=&quot;highlighter-rouge&quot;&gt;ks.cfg&lt;/code&gt; file into each image.&lt;/p&gt;

&lt;p&gt;Using some &lt;a href=&quot;https://thelinuxexperiment.com/create-a-virtual-hard-drive-volume-within-a-file-in-linux/&quot;&gt;helpful hints from the Internet&lt;/a&gt; we can do this as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir -p /tmp/kubm/kube01
cd /tmp/kubm/kube01
fallocate -l 1M kube01.img
dd if=/dev/zero of=kube01.img bs=1 count=1
mkfs -t ext4 kube01.img  # select y to proceed anyway
mkdir mnt
mount -o loop kube01.img mnt
cp &amp;lt;kickstartfile location&amp;gt;/ks.cfg mnt/
umount mnt
e2label kube01.img KUBM # note: This must match what was placed in the isolinux.cfg file. 
blkid kube01.img # test to see the label is there. 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Now copy this file to the webserver directory and test.&lt;/p&gt;

&lt;h3 id=&quot;23-verify-images&quot;&gt;2.3 Verify Images&lt;/h3&gt;

&lt;p&gt;You should now have a webserver that contains at the very least 3 images:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Kickstart images (unique per node) and named after the service profile.  So if the service profile is named &lt;code class=&quot;highlighter-rouge&quot;&gt;kube01&lt;/code&gt; the image should be named &lt;code class=&quot;highlighter-rouge&quot;&gt;kube01.img&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Boot media.  One file this should be something like &lt;code class=&quot;highlighter-rouge&quot;&gt;centos7.3-boot.iso&lt;/code&gt; and should be a small file.&lt;/li&gt;
  &lt;li&gt;Installation Media.  This is just the CentOS iso image unextracted sitting here to be installed and is referenced from your kickstart file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Be sure that you can &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;wget&lt;/code&gt; these files from the location you expect.&lt;/p&gt;

&lt;h2 id=&quot;3-ucs-vmedia-policies&quot;&gt;3 UCS vMedia Policies&lt;/h2&gt;

&lt;p&gt;When you have the ISO images ready, its time to create the vMedia policy that the service profile will use to boot.  This can be done from the GUI by creating the policies as shown in the picture near the beginning of this post.&lt;/p&gt;

&lt;p&gt;Programmatically, we can use the &lt;a href=&quot;https://github.com/CiscoUcs/ucsmsdk&quot;&gt;UCS Python SDK&lt;/a&gt; and accomplish the same thing:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createKubeVirtualMedia&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Adding Virtual Media Policy&quot;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ucsmsdk.mometa.cimcvmedia.CimcvmediaMountConfigPolicy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CimcvmediaMountConfigPolicy&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ucsmsdk.mometa.cimcvmedia.CimcvmediaConfigMountEntry&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CimcvmediaConfigMountEntry&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CimcvmediaMountConfigPolicy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;kube&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;retry_on_mount_fail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;yes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;parent_mo_or_dn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org-root&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;policy_owner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;local&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;descr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Kubernetes Boot Media&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;mo_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CimcvmediaConfigMountEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent_mo_or_dn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mapping_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;CentOS7&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;device_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cdd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mount_protocol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;remote_ip_address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;192.168.2.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;image_name_variable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;none&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;image_file_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;centos7.2.iso&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;image_path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;install&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;mo_2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CimcvmediaConfigMountEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent_mo_or_dn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mapping_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;kickstartImage&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;device_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hdd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mount_protocol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;remote_ip_address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;192.168.2.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;image_name_variable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;service-profile-name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;image_path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;install&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_mo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modify_present&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UcsException&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error_code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;103&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;already exists&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Notice in my example above, the http server will serve files from  &lt;a href=&quot;&amp;quot;&amp;quot;&quot;&gt;http://192.168.2.2/install/centos7.2.iso&lt;/a&gt; and &lt;a href=&quot;&amp;quot;&amp;quot;&quot;&gt;http://192.168.2.2/&lt;em&gt;service_profile_name&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;4-boot-policy&quot;&gt;4. Boot Policy&lt;/h2&gt;

&lt;p&gt;Now that you have a vMedia Policy you need to create a boot policy and attach it to a service profile that has the order:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Boot from Local Disk&lt;/li&gt;
  &lt;li&gt;Boot from Remote CIMC CDD&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Installing that and all &lt;em&gt;should&lt;/em&gt; work.  Please note that whenever you change the ISO image, the vmedia policy may still be using the old mounted ISO.  You might want to change names to ensure the ISO you think is loading is actually loading.&lt;/p&gt;

&lt;h1 id=&quot;troubleshooting&quot;&gt;Troubleshooting&lt;/h1&gt;

&lt;p&gt;There are a ton of moving parts with this setup so it is very easy to make mistakes!  Don’t worry, you are still a good person and you are still very smart.&lt;/p&gt;

&lt;p&gt;If boot fails it may drop you emergency shell.  From here you can see what happened.&lt;/p&gt;

&lt;p&gt;If you got the kickstart file successfully then you should see it in &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/cmdline.d/80-kickstart.conf&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You should also be able to tell in the &lt;code class=&quot;highlighter-rouge&quot;&gt;/run/initramfs/rdsosreport.txt&lt;/code&gt;.  This can tell you information like if the kickstart file wasn’t found.&lt;/p&gt;

&lt;p&gt;A few other mistakes made while creating this was:  The wrong kickstart file location, not creating the boot ISO in the right location.  When the ISO is created isolinux.cfg should be in the root directory of the disk.&lt;/p&gt;

&lt;p&gt;Hit me up on &lt;a href=&quot;https://twitter.com/vallard&quot;&gt;twitter&lt;/a&gt; if you have any issues with this.  I’d love feedback.&lt;/p&gt;

&lt;h1 id=&quot;additional-information&quot;&gt;Additional Information&lt;/h1&gt;
&lt;p&gt;This section is left as reference only but not required for making the above sections all work.  It is only here if further customizations are required, which I have found are not necessary at this point but may be in the future.&lt;/p&gt;

&lt;h2 id=&quot;modify-the-initrd&quot;&gt;Modify the initrd&lt;/h2&gt;
&lt;p&gt;You probably don’t need to do this but reference is here if you need to add something to the initrd.&lt;/p&gt;

&lt;p&gt;Extract the initrd&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xz -dc &amp;lt; initrd.img | cpio --quiet -i --make-directories
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Create a non valid symbolic link in the &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev&lt;/code&gt; device in this directory.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ln -s sr1 cdrom1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Pack it back up.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;find . 2&amp;gt;/dev/null | cpio --quiet -c -o | xz -9 --format=lzma &amp;gt;../initrd.img.new
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then you can place this initrd in the isolinux directory.&lt;/p&gt;
</description>
                <link>http://ciscoucs.github.io/os/2017/04/20/centos-redhat-baremetal</link>
                <guid>http://ciscoucs.github.io/os/2017/04/20/centos-redhat-baremetal</guid>
                <pubDate>Thu, 20 Apr 2017 00:00:00 -0700</pubDate>
        </item>

        <item>
                <title>CoreOS</title>
                <description>
&lt;p&gt;CoreOS is a Linux distribution that is trimmed down and purpose built to run containers.  It doesn’t even have its own package management system! (e.g.: no &lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get&lt;/code&gt; nor &lt;code class=&quot;highlighter-rouge&quot;&gt;yum&lt;/code&gt;) As more organizations look to build systems with Kubernetes or other Containerized solutions, using a stripped down OS can be appealing.&lt;/p&gt;

&lt;p&gt;In this article we will discuss how to install CoreOS on bare metal UCS.  The advantages of such an installation are the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Better Performance&lt;/li&gt;
  &lt;li&gt;Less cost.  There is no requirement to use a proprietary vendors virtualization platform.&lt;/li&gt;
  &lt;li&gt;Less management overhead:  No need to manage a VM farm as well as a container environment.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As with all articles in this platform it will be updated over time with new information.&lt;/p&gt;

&lt;h2 id=&quot;ucs-configuration&quot;&gt;UCS Configuration&lt;/h2&gt;
&lt;p&gt;The service profiles for a UCS blade (M3 or M4) will have the following characteristics:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Boot from Network first, then from hard drive&lt;/li&gt;
  &lt;li&gt;2 x Hard Drives mirrored&lt;/li&gt;
  &lt;li&gt;2 x vNICs (one up A side, one up B side) These NICs do not require Fabric Failover&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You’ll be happy to know that CoreOS installs out of the box with no requirement for additional NIC drivers and comes right up.  While the initial deployment of a PXE server may involve some headache, once up it works great.&lt;/p&gt;

&lt;p&gt;If you just want to skip all this madness and use the simple latest &lt;a href=&quot;https://stable.release.core-os.net/amd64-usr/current/coreos_production_iso_image.iso&quot;&gt;stable ISO image&lt;/a&gt; then that is an option for you as well.&lt;/p&gt;

&lt;h2 id=&quot;ipxe-configuration&quot;&gt;IPXE configuration&lt;/h2&gt;

&lt;p&gt;To make things dynamic and fast we will boot the servers from the network.  This means you will need some type of installation server that runs DHCP, TFTP, HTTP, etc.  With UCS you can put these on a seperate network and then update the vNIC after installation has completed.&lt;/p&gt;

&lt;h3 id=&quot;dhcp-config&quot;&gt;DHCP Config&lt;/h3&gt;
&lt;p&gt;You will need to point to the files you want to install.  In our DHCP config we have the following:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!ipxe&lt;/span&gt;
kernel http://&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-server&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/install/coreos/coreos_production_pxe.vmlinuz coreos.config.url&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;http://&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-server&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/install/coreos/pxe-config.ign coreos.first_boot&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
initrd http://&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-server&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/install/coreos/coreos_production_pxe_image.cpio.gz
boot
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This directs the server when it PXEboots to grab three files:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;http://${next-server}/install/coreos/coreos_production_pxe.vmlinuz&lt;/code&gt; - This is the kernel that runs the operating system.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;http://${next-server}/install/coreos/pxe-config.ign&lt;/code&gt; - This is the configuration file that tells Container Linux how to install itself.  Think of this like the Kickstart file if you are familiar with RedHat system.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;http://${next-server}/install/coreos/coreos_production_pxe_image.cpio.gz&lt;/code&gt; - This is the RAM Disk image used to run the operating system.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of these files use the &lt;code class=&quot;highlighter-rouge&quot;&gt;${next-server}&lt;/code&gt; macro which tells the server that is booting with this file to use the IP address of the tftpserver as the address to query HTTP.&lt;/p&gt;

&lt;h3 id=&quot;coreos-binaries&quot;&gt;CoreOS binaries&lt;/h3&gt;

&lt;p&gt;Of the files that are requested, two of them are binary files that need to be downloaded from the CoreOS website.  There is also a third file that is required for the second stage of installation.  You can get these from the following commands run on your installation server in the &lt;code class=&quot;highlighter-rouge&quot;&gt;/install/coreos&lt;/code&gt; directory:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget http://stable.release.core-os.net/amd64-usr/current/coreos_production_openstack_image.img.bz2
wget http://stable.release.core-os.net/amd64-usr/current/coreos_production_pxe.vmlinuz
wget http://stable.release.core-os.net/amd64-usr/current/coreos_production_pxe_image.cpio.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;coreos-basic-configuration&quot;&gt;CoreOS basic configuration&lt;/h3&gt;

&lt;p&gt;Container Linux introduced a new configuration tool to configure its systems in April 2016.  This system is called &lt;a href=&quot;https://coreos.com/ignition/docs/0.14.0/what-is-ignition.html&quot;&gt;ignition&lt;/a&gt;.  You still have the option of using cloud-config which is a simple yaml file.  In this setup we are using ignition files.  A simple ignition file to get you going would look something like the following:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;ignition&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2.0.0&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;passwd&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;users&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;vallard&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;create&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;uid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;passwordHash&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$1$AQGDGZZC$yGF9FviVbDZHqZiUfaZe9.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;sshAuthorizedKeys&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA5xwR+1+0sBwa0wME6maFjXjIdxUS9taPOgpf1c1EJUgZENDUUOdOabDbEZ6w/xLvx7vHtYDMMTzbyKif9O5hfgQ4RXNjMIMhu+PgShfCsUCFyhMF+cKZNeg2fUZn83r9oWWcFfL31Qh8PMe3yHV30fmBUwpqdCiUCrLznefVwsIlBcnr0DaScU2TdfY73sFR69K6bBJ80GYryaQi2v2s7cjZl2sDMuv5tDNmiOZCxtDJpRS4oaILnRh0gPQaYem0Hl2AGsETsYzqbXsvKkKd96hUtKmoDQ/voHaqFvB6/don12BFQDkTtCGqOCkga7JIGWhAdZbD3+owvOPaPAvK7Q==&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;core&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;sshAuthorizedKeys&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA5xwR+1+0sBwa0wME6maFjXjIdxUS9taPOgpf1c1EJUgZENDUUOdOabDbEZ6w/xLvx7vHtYDMMTzbyKif9O5hfgQ4RXNjMIMhu+PgShfCsUCFyhMF+cKZNeg2fUZn83r9oWWcFfL31Qh8PMe3yHV30fmBUwpqdCiUCrLznefVwsIlBcnr0DaScU2TdfY73sFR69K6bBJ80GYryaQi2v2s7cjZl2sDMuv5tDNmiOZCxtDJpRS4oaILnRh0gPQaYem0Hl2AGsETsYzqbXsvKkKd96hUtKmoDQ/voHaqFvB6/don12BFQDkTtCGqOCkga7JIGWhAdZbD3+owvOPaPAvK7Q==&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The above file can be saved as &lt;code class=&quot;highlighter-rouge&quot;&gt;/install/coreos/pxe-config.ign&lt;/code&gt;.  This file will create a new user &lt;code class=&quot;highlighter-rouge&quot;&gt;vallard&lt;/code&gt; with the password &lt;code class=&quot;highlighter-rouge&quot;&gt;Cisco.123&lt;/code&gt;.  It will also add the authorized SSH key to both the &lt;code class=&quot;highlighter-rouge&quot;&gt;vallard&lt;/code&gt; user and the &lt;code class=&quot;highlighter-rouge&quot;&gt;core&lt;/code&gt; user.  You should substitute your key and your own user for this if you wanted to add them.&lt;/p&gt;

&lt;p&gt;With all these files in place when the UCS blade boots you should be able to log into it.&lt;/p&gt;

&lt;h2 id=&quot;installing-to-disk&quot;&gt;Installing to Disk&lt;/h2&gt;

&lt;p&gt;Up until now, the configuration we have created will simply boot a server with a ramdisk and kernel.  That means that nothing will persist on the server.  In fact, if you already had an Operating System installed on the disk (like Ubuntu) you could reboot and turn off the pxe server and it will simply boot back into Ubuntu.  The above is also a good starting point for installing stateless systems.&lt;/p&gt;

&lt;p&gt;But let’s suppose that you want to have this operating system persist with reboots.  To do that there is another step and we call this &lt;strong&gt;stage 1&lt;/strong&gt; with &lt;strong&gt;stage 0&lt;/strong&gt; being the initial boot.&lt;/p&gt;

&lt;p&gt;Container Linux comes with a program called &lt;a href=&quot;https://coreos.com/os/docs/latest/installing-to-disk.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;coreos-install&lt;/code&gt;&lt;/a&gt;  This progam will copy the bits of the operating system image onto disk.  In order to use it, we need to modify the &lt;code class=&quot;highlighter-rouge&quot;&gt;/install/coreos/pxe-config.ign&lt;/code&gt; we created above with some intelligence to run this script.&lt;/p&gt;

&lt;h3 id=&quot;config-transpiler&quot;&gt;Config Transpiler&lt;/h3&gt;

&lt;p&gt;When CoreOS introduced ignition there was some &lt;a href=&quot;https://news.ycombinator.com/item?id=11484196&quot;&gt;grumbling on the InterWebs&lt;/a&gt;.  The primary complaint is that while JSON is great for machines, its not so great for humans to use.  CoreOS has a nice &lt;a href=&quot;https://coreos.com/validate&quot;&gt;tool to validate&lt;/a&gt; ignition files, but still maintaining them is not so great.&lt;/p&gt;

&lt;p&gt;One way we can get around this is by writing the files in YAML and then use the &lt;a href=&quot;https://github.com/coreos/container-linux-config-transpiler/blob/master/doc/getting-started.md&quot;&gt;Config Transpiler&lt;/a&gt; tool to translate from YAML to JSON.&lt;/p&gt;

&lt;p&gt;For an installation script we can create the following YAML file:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;systemd&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;units&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;installer.service&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;enable&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;[Unit]&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;Requires=network-online.target&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;After=network-online.target&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;[Service]&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;Type=simple&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;ExecStart=/opt/installer&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;[Install]&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;WantedBy=multi-user.target&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/opt/installer&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;filesystem&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;root&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0500&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;inline&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
          &lt;span class=&quot;no&quot;&gt;#!/bin/bash -ex&lt;/span&gt;
          &lt;span class=&quot;no&quot;&gt;curl http://172.20.1.1/install/coreos/stage1.ign -o ignition.json&lt;/span&gt;
          &lt;span class=&quot;no&quot;&gt;coreos-install -d /dev/sda -C stable -n -b http://172.20.1.1/install/coreos -i ignition.json&lt;/span&gt;
          &lt;span class=&quot;no&quot;&gt;udevadm settle&lt;/span&gt;
          &lt;span class=&quot;no&quot;&gt;systemctl reboot&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;passwd&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;core&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;ssh_authorized_keys&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ssh-rsa&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;AAAAB3NzaC1yc2EAAAABIwAAAQEA5xwR+1+0sBwa0wME6maFjXjIdxUS9taPOgpf1c1EJUgZENDUUOdOabDbEZ6w/xLvx7vHtYDMMTzbyKif9O5hfgQ4RXNjMIMhu+PgShfCsUCFyhMF+cKZNeg2fUZn83r9oWWcFfL31Qh8PMe3yHV30fmBUwpqdCiUCrLznefVwsIlBcnr0DaScU2TdfY73sFR69K6bBJ80GYryaQi2v2s7cjZl2sDMuv5tDNmiOZCxtDJpRS4oaILnRh0gPQaYem0Hl2AGsETsYzqbXsvKkKd96hUtKmoDQ/voHaqFvB6/don12BFQDkTtCGqOCkga7JIGWhAdZbD3+owvOPaPAvK7Q==&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This is based off the example found in the &lt;a href=&quot;https://github.com/coreos/matchbox/blob/master/examples/ignition/install-reboot.yaml&quot;&gt;CoreOS Matchbox Project&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To use this file there are further files we need to modify:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;stage1.ign&lt;/code&gt; - This file is same as the previous &lt;code class=&quot;highlighter-rouge&quot;&gt;/install/coreos/pxe-config.ign&lt;/code&gt; we showed above.  We have just renamed it to stage1.ign.  This file is what will be executed during the installation of Container Linux onto Disk.  It is a seperate configuration file than what we use to bootstrap the cluster.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;coreos_production_image.bin.bz2&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;coreos_production_image.bin.bz2.sig&lt;/code&gt;.  These two files are what the &lt;code class=&quot;highlighter-rouge&quot;&gt;coreos-install&lt;/code&gt; script will try to get from the internet unless you download them and point it to a different installer.  These files can be downloaded from something like:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wget https://stable.release.core-os.net/amd64-usr/1298.7.0/coreos_production_image.bin.bz2&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wget https://stable.release.core-os.net/amd64-usr/1298.7.0/coreos_production_image.bin.bz2.sig&lt;/code&gt;
It’s important to note that Container Linux images change all the time.  So even though at the time of this writing we are using 1298.7.0 you will need to make sure that whichever stable release you use matches the files you download, or you’ll need to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;-V&lt;/code&gt; flag on the &lt;code class=&quot;highlighter-rouge&quot;&gt;coreos-install&lt;/code&gt; command.  These files will then live in &lt;code class=&quot;highlighter-rouge&quot;&gt;/install/coreos/1298.7.0&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The HTTP server in the example above is &lt;code class=&quot;highlighter-rouge&quot;&gt;172.20.1.1&lt;/code&gt; and the base URL (which the &lt;code class=&quot;highlighter-rouge&quot;&gt;-b&lt;/code&gt; flag signifies) will then search for the images at &lt;code class=&quot;highlighter-rouge&quot;&gt;http://172.20.1.1/install/coreos/&amp;lt;version&amp;gt;/&lt;/code&gt;.  You may have a different HTTP server setup so be sure the base part matches what you are serving.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once you are happy with this file you can transcode it with the following command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat install.yaml | ./ct | python -m json.tool | tee pxe-config.ign
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;where the &lt;code class=&quot;highlighter-rouge&quot;&gt;ct&lt;/code&gt; command is the config transpiler binary we downloaded from &lt;a href=&quot;https://github.com/coreos/container-linux-config-transpiler/releases&quot;&gt;the github repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that you have this working you can sit back and watch the fun.  The system will reboot and you’ll be able to login.&lt;/p&gt;

&lt;p&gt;In this article for the sake of simplicity we have used a rather trivial ignition file.  We can get more advanced and will need to if we want to install &lt;code class=&quot;highlighter-rouge&quot;&gt;kubernetes&lt;/code&gt; and other systems on this server.  Expect to see more of these articles here on that subject.&lt;/p&gt;

&lt;p&gt;If you have any questions, please let me know on &lt;a href=&quot;https://twitter.com/vallard&quot;&gt;Twitter&lt;/a&gt;&lt;/p&gt;
</description>
                <link>http://ciscoucs.github.io/os/2017/04/06/coreos</link>
                <guid>http://ciscoucs.github.io/os/2017/04/06/coreos</guid>
                <pubDate>Thu, 06 Apr 2017 00:00:00 -0700</pubDate>
        </item>


</channel>
</rss>
